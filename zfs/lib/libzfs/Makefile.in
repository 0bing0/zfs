subdir-m += include
DISTFILES  = libzfs_changelist.c libzfs_config.c libzfs_dataset.c
DISTFILES += libzfs_graph.c libzfs_import.c libzfs_mount.c libzfs_pool.c
DISTFILES += libzfs_sendrecv.c libzfs_status.c libzfs_util.c

LIBRARY := libzfs

# Compile as shared library.  There's an extra useless host program
# here called 'zu' because it was the easiest way I could convince
# the kernel build system to construct a user space shared library.

HOSTCFLAGS += @HOSTCFLAGS@
HOSTCFLAGS += -I@LIBDIR@/libzfs/include
HOSTCFLAGS += -I@LIBDIR@/libsolcompat/include
HOSTCFLAGS += -I@LIBDIR@/libport/include
HOSTCFLAGS += -I@LIBDIR@/libumem/include
HOSTCFLAGS += -I@LIBDIR@/libuutil/include
HOSTCFLAGS += -I@LIBDIR@/libnvpair/include
HOSTCFLAGS += -I@LIBDIR@/libavl/include
HOSTCFLAGS += -I@LIBDIR@/libzcommon/include
HOSTCFLAGS += -I@LIBDIR@/libdmu-ctl/include
HOSTCFLAGS += -I@LIBDIR@/libzpool	# For existing fletcher.c hack

HOSTLDFLAGS += -ldl -lm
HOSTLDFLAGS += -lavl -L@LIBDIR@/libavl
HOSTLDFLAGS += -lnvpair -L@LIBDIR@/libnvpair
HOSTLDFLAGS += -luutil -L@LIBDIR@/libuutil
HOSTLDFLAGS += -lzport -L@LIBDIR@/libport
HOSTLDFLAGS += -lsolcompat -L@LIBDIR@/libsolcompat
HOSTLDFLAGS += -lzcommon -L@LIBDIR@/libzcommon

hostprogs-y := zu
always := $(hostprogs-y)

zu-objs := zu.o ${LIBRARY}.so

${LIBRARY}-objs += libzfs_dataset.o	# Interface for manipulating datasets
${LIBRARY}-objs += libzfs_pool.o	# Interface for manipulating pools
${LIBRARY}-objs += libzfs_changelist.o	# Support for property changes
${LIBRARY}-objs += libzfs_config.o	# Interface for manipulating configuration
${LIBRARY}-objs += libzfs_graph.o	# Support for dependent list for datasets
${LIBRARY}-objs += libzfs_import.o	# Discover and import pools
${LIBRARY}-objs += libzfs_mount.o	# Mount, unmount, and share datasets
${LIBRARY}-objs += libzfs_status.o	# Status
${LIBRARY}-objs += libzfs_util.o	# Misc support
${LIBRARY}-objs += libzfs_sendrecv.o
